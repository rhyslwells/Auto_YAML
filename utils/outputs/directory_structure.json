{
    "": {
        "main.py": {
            "functions": [
                {
                    "name": "main",
                    "args": [],
                    "docstring": "Main entry point to process Obsidian notes.",
                    "decorators": []
                }
            ],
            "classes": [],
            "imports": [
                "scripts.process_notes",
                "scripts.file_utils",
                "scripts.tagging"
            ],
            "variables": [
                "BASE_DIR",
                "CONFIG_DIR",
                "NOTES_DIR",
                "LOGS_DIR",
                "REFERENCE_FILE_PATH",
                "PROMPT_FILE_PATH",
                "LOG_FILE",
                "NEW_TAGS_LOG",
                "parser",
                "args",
                "missing_files",
                "reference_content",
                "prompt_template",
                "reference_tags"
            ]
        }
    },
    "scripts": {
        "__init__.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "variables": []
        },
        "file_utils.py": {
            "functions": [
                {
                    "name": "load_file_content",
                    "args": [
                        "file_path"
                    ],
                    "docstring": "Load the content of a file.",
                    "decorators": []
                },
                {
                    "name": "extract_yaml_header",
                    "args": [
                        "content"
                    ],
                    "docstring": "Extract YAML frontmatter if it exists.",
                    "decorators": []
                },
                {
                    "name": "write_updated_file",
                    "args": [
                        "file_path",
                        "metadata",
                        "body"
                    ],
                    "docstring": "Write the updated YAML frontmatter and content to the file.",
                    "decorators": []
                }
            ],
            "classes": [],
            "imports": [],
            "variables": [
                "new_yaml_header",
                "new_content",
                "parts"
            ]
        },
        "logging_utils.py": {
            "functions": [
                {
                    "name": "log_action",
                    "args": [
                        "log_file",
                        "action",
                        "file_path"
                    ],
                    "docstring": "Log processed or skipped files with the basename of the file.",
                    "decorators": []
                },
                {
                    "name": "log_new_tags",
                    "args": [
                        "file_path",
                        "new_tags",
                        "log_file"
                    ],
                    "docstring": "Log newly introduced tags that were not in the reference file, using the basename of the file.",
                    "decorators": []
                }
            ],
            "classes": [],
            "imports": [],
            "variables": [
                "file_name",
                "log_file_path",
                "file_name",
                "log_file_path"
            ]
        },
        "process_notes.py": {
            "functions": [
                {
                    "name": "merge_yaml_headers",
                    "args": [
                        "existing_yaml",
                        "new_yaml"
                    ],
                    "docstring": "Merge YAML metadata using an outer join strategy:\n- Retains all keys from `existing_yaml` (flexible structure).\n- `new_yaml` values overwrite `existing_yaml` values if they are non-empty.\n- Lists are merged while ensuring no duplicates.\n- Missing keys in `new_yaml` retain their values from `existing_yaml`.\n\nParameters:\n    - existing_yaml (dict): The original YAML header.\n    - new_yaml (dict): The AI-generated YAML header.\n\nReturns:\n    - dict: The merged YAML metadata.",
                    "decorators": []
                },
                {
                    "name": "process_file",
                    "args": [
                        "file_path",
                        "reference_content",
                        "prompt_template",
                        "reference_tags",
                        "opt1",
                        "opt2",
                        "test_mode",
                        "log_file",
                        "new_tags_log"
                    ],
                    "docstring": "Process an individual Markdown file with different processing modes.\n\nParameters:\n    - file_path (str): Path to the Markdown file.\n    - reference_content (str): Reference content for generating tags.\n    - prompt_template (str): Template for the AI prompt.\n    - reference_tags (set): Existing tags from the reference content.\n    - opt1 (bool): Merge AI-generated YAML with existing metadata.\n    - opt2 (bool): Replace existing metadata with AI-generated YAML.\n    - test_mode (bool): Use predefined trial metadata instead of OpenAI.\n    - log_file (str): Path to log file.\n    - new_tags_log (str): Path to new tags log file.",
                    "decorators": []
                },
                {
                    "name": "process_folder",
                    "args": [
                        "folder_path",
                        "reference_content",
                        "prompt_template",
                        "reference_tags",
                        "opt1",
                        "opt2",
                        "test_mode",
                        "log_file",
                        "new_tags_log"
                    ],
                    "docstring": "Iterate through Markdown files in the folder and process them.\n\nParameters:\n    - folder_path (str): Path to the folder containing Markdown files.\n    - reference_content (str): Reference content for generating tags.\n    - prompt_template (str): Template for the AI prompt.\n    - reference_tags (set): Existing tags from the reference content.\n    - opt1 (bool): Merge AI-generated YAML with existing metadata.\n    - opt2 (bool): Replace existing metadata with AI-generated YAML.\n    - test_mode (bool): Use predefined trial metadata instead of OpenAI.\n    - log_file (str): Path to log file.\n    - new_tags_log (str): Path to new tags log file.",
                    "decorators": []
                }
            ],
            "classes": [],
            "imports": [
                "scripts.file_utils",
                "scripts.tagging",
                "scripts.logging_utils"
            ],
            "variables": [
                "merged_yaml",
                "file_name",
                "ai_metadata",
                "new_tags",
                "existing_value",
                "content",
                "merged_metadata",
                "yaml_header",
                "merged_metadata",
                "merged_metadata"
            ]
        },
        "tagging.py": {
            "functions": [
                {
                    "name": "extract_reference_tags",
                    "args": [
                        "reference_content"
                    ],
                    "docstring": "Extracts tags from the reference file.\n\n- Parses the YAML metadata from the reference content.\n- Returns a set of existing tags for comparison.\n\nParameters:\n    - reference_content (str): The reference note content containing YAML metadata.\n\nReturns:\n    - set: A set of extracted tags.",
                    "decorators": []
                },
                {
                    "name": "generate_yaml_header",
                    "args": [
                        "content",
                        "reference_content",
                        "prompt_template",
                        "test_mode"
                    ],
                    "docstring": "Generates a YAML header using OpenAI based on reference context.\n\n- If `test_mode` is True, returns a predefined trial YAML header (for testing/debugging).\n- Otherwise, constructs a prompt and queries OpenAI to generate a YAML header.",
                    "decorators": []
                },
                {
                    "name": "identify_new_tags",
                    "args": [
                        "generated_tags",
                        "reference_tags"
                    ],
                    "docstring": "Identifies new tags that are not present in the reference file.\n\n- Compares the AI-generated tags against existing reference tags.\n- Returns a set of newly introduced tags.\n\nParameters:\n    - generated_tags (list): List of tags generated by OpenAI.\n    - reference_tags (set): Existing tags from the reference content.\n\nReturns:\n    - set: Tags that are new compared to the reference.",
                    "decorators": []
                }
            ],
            "classes": [],
            "imports": [
                "scripts.file_utils"
            ],
            "variables": [
                "tags",
                "category",
                "phase",
                "topic",
                "filename",
                "prompt",
                "response",
                "ai_metadata"
            ]
        }
    },
    "tests": {
        "__init__.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "variables": []
        },
        "test_file_utils.py": {
            "functions": [
                {
                    "name": "test_extract_yaml_header",
                    "args": [],
                    "docstring": null,
                    "decorators": []
                },
                {
                    "name": "test_load_file_content",
                    "args": [
                        "tmp_path"
                    ],
                    "docstring": null,
                    "decorators": []
                },
                {
                    "name": "test_write_updated_file",
                    "args": [
                        "tmp_path"
                    ],
                    "docstring": null,
                    "decorators": []
                }
            ],
            "classes": [],
            "imports": [
                "scripts.file_utils"
            ],
            "variables": [
                "content",
                "file_path",
                "content",
                "file_path",
                "metadata",
                "body",
                "expected_content",
                "content"
            ]
        },
        "test_logging_utils.py": {
            "functions": [
                {
                    "name": "test_log_action",
                    "args": [
                        "tmp_path"
                    ],
                    "docstring": null,
                    "decorators": []
                },
                {
                    "name": "test_log_new_tags",
                    "args": [
                        "tmp_path"
                    ],
                    "docstring": null,
                    "decorators": []
                }
            ],
            "classes": [],
            "imports": [
                "scripts.logging_utils"
            ],
            "variables": [
                "log_file",
                "log_file",
                "content",
                "content"
            ]
        },
        "test_main.py": {
            "functions": [
                {
                    "name": "mock_dependencies",
                    "args": [],
                    "docstring": null,
                    "decorators": []
                },
                {
                    "name": "test_main",
                    "args": [
                        "mock_dependencies"
                    ],
                    "docstring": "Test processing the main function with different modes.",
                    "decorators": []
                }
            ],
            "classes": [],
            "imports": [
                "unittest.mock",
                "main"
            ],
            "variables": []
        },
        "test_process_notes.py": {
            "functions": [
                {
                    "name": "mock_dependencies",
                    "args": [],
                    "docstring": "Mock dependencies used in `process_file`.",
                    "decorators": []
                },
                {
                    "name": "test_process_file",
                    "args": [
                        "mock_dependencies"
                    ],
                    "docstring": "Test processing a file while ensuring all dependencies are called correctly.",
                    "decorators": []
                },
                {
                    "name": "test_merge_yaml_headers",
                    "args": [],
                    "docstring": "Test merging YAML headers flexibly.",
                    "decorators": []
                },
                {
                    "name": "test_merge_yaml_headers_parametrized",
                    "args": [
                        "existing_yaml",
                        "new_yaml",
                        "expected_result"
                    ],
                    "docstring": "Test merging YAML headers with parameterized cases.",
                    "decorators": []
                }
            ],
            "classes": [],
            "imports": [
                "unittest.mock",
                "scripts.process_notes",
                "scripts.process_notes"
            ],
            "variables": [
                "existing_yaml",
                "new_yaml",
                "merged",
                "new_yaml_with_empty",
                "merged",
                "existing_yaml_str",
                "new_yaml",
                "existing_yaml_parsed",
                "merged",
                "empty_existing_yaml",
                "merged",
                "arbitrary_existing_yaml",
                "arbitrary_new_yaml",
                "merged",
                "merged"
            ]
        },
        "test_tagging.py": {
            "functions": [
                {
                    "name": "test_extract_reference_tags",
                    "args": [],
                    "docstring": "Test extracting tags from a reference YAML header.",
                    "decorators": []
                },
                {
                    "name": "test_extract_reference_tags_empty",
                    "args": [],
                    "docstring": "Test extracting tags when reference content is empty.",
                    "decorators": []
                },
                {
                    "name": "test_identify_new_tags",
                    "args": [],
                    "docstring": "Test identifying new tags that are not in the reference file.",
                    "decorators": []
                },
                {
                    "name": "test_identify_new_tags_no_difference",
                    "args": [],
                    "docstring": "Test when there are no new tags.",
                    "decorators": []
                },
                {
                    "name": "test_generate_yaml_header_trial",
                    "args": [],
                    "docstring": "Test generating a trial YAML header without OpenAI API call.",
                    "decorators": []
                },
                {
                    "name": "mock_openai",
                    "args": [
                        "mocker"
                    ],
                    "docstring": "Mock OpenAI API response.",
                    "decorators": []
                },
                {
                    "name": "test_generate_yaml_header_openai",
                    "args": [
                        "mock_openai"
                    ],
                    "docstring": "Test generating YAML header using OpenAI mock.",
                    "decorators": []
                }
            ],
            "classes": [],
            "imports": [
                "unittest.mock",
                "scripts.tagging",
                "unittest.mock",
                "your_module"
            ],
            "variables": [
                "reference_content",
                "ref_tags",
                "reference_content",
                "ref_tags",
                "reference_tags",
                "generated_tags",
                "new_tags",
                "reference_tags",
                "generated_tags",
                "new_tags",
                "result",
                "mock_response",
                "content",
                "reference_content",
                "prompt_template",
                "result"
            ]
        }
    }
}