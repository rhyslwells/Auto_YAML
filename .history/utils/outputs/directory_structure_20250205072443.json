{
    "scripts": {
        "__init__.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "variables": []
        },
        "file_utils.py": {
            "functions": [
                {
                    "name": "load_file_content",
                    "args": [
                        "file_path"
                    ],
                    "docstring": "Load the content of a file.",
                    "decorators": []
                },
                {
                    "name": "extract_yaml_header",
                    "args": [
                        "content"
                    ],
                    "docstring": "Extract YAML frontmatter if it exists.",
                    "decorators": []
                },
                {
                    "name": "write_updated_file",
                    "args": [
                        "file_path",
                        "metadata",
                        "body"
                    ],
                    "docstring": "Write the updated YAML frontmatter and content to the file.",
                    "decorators": []
                }
            ],
            "classes": [],
            "imports": [],
            "variables": [
                "new_yaml_header",
                "new_content",
                "parts"
            ]
        },
        "logging_utils.py": {
            "functions": [
                {
                    "name": "log_action",
                    "args": [
                        "log_file",
                        "action",
                        "file_path"
                    ],
                    "docstring": "Log processed or skipped files with the basename of the file.",
                    "decorators": []
                },
                {
                    "name": "log_new_tags",
                    "args": [
                        "file_path",
                        "new_tags",
                        "log_file"
                    ],
                    "docstring": "Log newly introduced tags that were not in the reference file, using the basename of the file.",
                    "decorators": []
                }
            ],
            "classes": [],
            "imports": [],
            "variables": [
                "file_name",
                "log_file_path",
                "file_name",
                "log_file_path"
            ]
        },
        "process_notes.py": {
            "functions": [
                {
                    "name": "merge_yaml_headers",
                    "args": [
                        "existing_yaml",
                        "new_yaml"
                    ],
                    "docstring": "Merge YAML data, keeping existing values when AI returns empty ones.",
                    "decorators": []
                },
                {
                    "name": "process_file",
                    "args": [
                        "file_path",
                        "reference_content",
                        "prompt_template",
                        "reference_tags",
                        "opt1",
                        "opt2",
                        "log_file",
                        "new_tags_log"
                    ],
                    "docstring": "Process an individual Markdown file with different processing modes.",
                    "decorators": []
                },
                {
                    "name": "process_folder",
                    "args": [
                        "folder_path",
                        "reference_content",
                        "prompt_template",
                        "reference_tags",
                        "opt1",
                        "opt2",
                        "log_file",
                        "new_tags_log"
                    ],
                    "docstring": "Iterate through Markdown files in the folder and process them.",
                    "decorators": []
                }
            ],
            "classes": [],
            "imports": [
                "scripts.file_utils",
                "scripts.tagging",
                "scripts.logging_utils"
            ],
            "variables": [
                "merged_yaml",
                "content",
                "ai_metadata",
                "new_tags",
                "merged_metadata",
                "merged_metadata",
                "merged_metadata"
            ]
        },
        "tagging.py": {
            "functions": [
                {
                    "name": "extract_reference_tags",
                    "args": [
                        "reference_content"
                    ],
                    "docstring": "Extracts tags from the reference file.\n\n- Parses the YAML metadata from the reference content.\n- Returns a set of existing tags for comparison.",
                    "decorators": []
                },
                {
                    "name": "generate_yaml_header",
                    "args": [
                        "content",
                        "reference_content",
                        "prompt_template",
                        "use_trial"
                    ],
                    "docstring": "Generates a YAML header using OpenAI based on reference context.\n\n- If `use_trial` is True, returns a predefined trial YAML header (for testing/debugging).\n- Otherwise, constructs a prompt and queries OpenAI to generate a YAML header.\n\nParameters:\n    - content (str): The main body of the note.\n    - reference_content (str): The reference document for context.\n    - prompt_template (str): The template for constructing the prompt.\n    - use_trial (bool): Whether to return a trial header instead of calling OpenAI.\n\nReturns:\n    - dict: A dictionary representing the YAML metadata.",
                    "decorators": []
                },
                {
                    "name": "identify_new_tags",
                    "args": [
                        "generated_tags",
                        "reference_tags"
                    ],
                    "docstring": "Identifies new tags that are not present in the reference file.\n\n- Compares the AI-generated tags against existing reference tags.\n- Returns a set of newly introduced tags.\n\nParameters:\n    - generated_tags (list): List of tags generated by OpenAI.\n    - reference_tags (set): Existing tags from the reference content.\n\nReturns:\n    - set: Tags that are new compared to the reference.",
                    "decorators": []
                }
            ],
            "classes": [],
            "imports": [
                "scripts.file_utils"
            ],
            "variables": [
                "prompt",
                "response"
            ]
        },
    },
    "tests": {
        "__init__.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "variables": []
        },
        "test_file_utils.py": {
            "functions": [
                {
                    "name": "test_extract_yaml_header",
                    "args": [],
                    "docstring": null,
                    "decorators": []
                },
                {
                    "name": "test_load_file_content",
                    "args": [
                        "tmp_path"
                    ],
                    "docstring": null,
                    "decorators": []
                },
                {
                    "name": "test_write_updated_file",
                    "args": [
                        "tmp_path"
                    ],
                    "docstring": null,
                    "decorators": []
                }
            ],
            "classes": [],
            "imports": [
                "scripts.file_utils"
            ],
            "variables": [
                "content",
                "file_path",
                "content",
                "file_path",
                "metadata",
                "body",
                "expected_content",
                "content"
            ]
        },
        "test_logging_utils.py": {
            "functions": [
                {
                    "name": "test_log_action",
                    "args": [
                        "tmp_path"
                    ],
                    "docstring": null,
                    "decorators": []
                },
                {
                    "name": "test_log_new_tags",
                    "args": [
                        "tmp_path"
                    ],
                    "docstring": null,
                    "decorators": []
                }
            ],
            "classes": [],
            "imports": [
                "scripts.logging_utils"
            ],
            "variables": [
                "log_file",
                "log_file",
                "content",
                "content"
            ]
        },
        "test_main.py": {
            "functions": [
                {
                    "name": "mock_dependencies",
                    "args": [],
                    "docstring": null,
                    "decorators": []
                },
                {
                    "name": "test_main",
                    "args": [
                        "mock_dependencies"
                    ],
                    "docstring": null,
                    "decorators": []
                }
            ],
            "classes": [],
            "imports": [
                "unittest.mock",
                "main"
            ],
            "variables": []
        },
        "test_process_notes.py": {
            "functions": [
                {
                    "name": "mock_dependencies",
                    "args": [],
                    "docstring": null,
                    "decorators": []
                },
                {
                    "name": "test_process_file",
                    "args": [
                        "mock_dependencies"
                    ],
                    "docstring": null,
                    "decorators": []
                }
            ],
            "classes": [],
            "imports": [
                "unittest.mock",
                "scripts.process_notes"
            ],
            "variables": []
        },
        "test_tagging.py": {
            "functions": [
                {
                    "name": "test_extract_reference_tags",
                    "args": [],
                    "docstring": "Test extracting tags from a reference YAML header.",
                    "decorators": []
                },
                {
                    "name": "test_extract_reference_tags_empty",
                    "args": [],
                    "docstring": "Test extracting tags when reference content is empty.",
                    "decorators": []
                },
                {
                    "name": "test_identify_new_tags",
                    "args": [],
                    "docstring": "Test identifying new tags that are not in the reference file.",
                    "decorators": []
                },
                {
                    "name": "test_identify_new_tags_no_difference",
                    "args": [],
                    "docstring": "Test when there are no new tags.",
                    "decorators": []
                },
                {
                    "name": "test_generate_yaml_header_trial",
                    "args": [],
                    "docstring": "Test generating a trial YAML header without OpenAI API call.",
                    "decorators": []
                },
                {
                    "name": "mock_openai",
                    "args": [
                        "mocker"
                    ],
                    "docstring": "Mock OpenAI API response.",
                    "decorators": []
                },
                {
                    "name": "test_generate_yaml_header_openai",
                    "args": [
                        "mock_openai"
                    ],
                    "docstring": "Test generating YAML header using OpenAI mock.",
                    "decorators": []
                }
            ],
            "classes": [],
            "imports": [
                "scripts.tagging"
            ],
            "variables": [
                "reference_content",
                "ref_tags",
                "reference_content",
                "ref_tags",
                "reference_tags",
                "generated_tags",
                "new_tags",
                "reference_tags",
                "generated_tags",
                "new_tags",
                "result",
                "mock_response",
                "content",
                "reference_content",
                "prompt_template",
                "result"
            ]
        }
    }
}