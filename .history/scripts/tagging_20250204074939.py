import openai
import yaml
import os
from scripts.file_utils import extract_yaml_header

# Load OpenAI API key from environment variable
openai.api_key = os.getenv("OPENAI_API_KEY")

def extract_reference_tags(reference_content):
    """
    Extracts tags from the reference file.
    
    - Parses the YAML metadata from the reference content.
    - Returns a set of existing tags for comparison.
    """
    ref_metadata, _ = extract_yaml_header(reference_content)
    return set(ref_metadata.get("tags", [])) if ref_metadata else set()

def generate_yaml_header(content, reference_content, prompt_template, use_trial=False):
    """
    Generates a YAML header using OpenAI based on reference context.
    
    - If `use_trial` is True, returns a predefined trial YAML header (for testing/debugging).
    - Otherwise, constructs a prompt and queries OpenAI to generate a YAML header.

    Parameters:
        - content (str): The main body of the note.
        - reference_content (str): The reference document for context.
        - prompt_template (str): The template for constructing the prompt.
        - use_trial (bool): Whether to return a trial header instead of calling OpenAI.

    Returns:
        - dict: A dictionary representing the YAML metadata.
    """

    if use_trial:
        # Return a predefined trial example header for testing without API calls.
        return {
            "tags": ["AI", "Machine Learning", "Deep Learning"],
            "aliases": ["ML Model", "AI Model"],
            "category": "Technology",
            "phase": "Model Training",
            "topic": "Neural Networks",
            "filename": "neural_network_model.py"
        }

    # Construct the prompt
    prompt = prompt_template.format(reference=reference_content, target_content=content)

    try:
        # Query OpenAI to generate a YAML header
        response = openai.ChatCompletion.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": "You categorize notes using a provided reference."},
                {"role": "user", "content": prompt}
            ]
        )

        # Parse the response as YAML and return the structured dictionary
        return yaml.safe_load(response["choices"][0]["message"]["content"].strip())

    except openai.error.OpenAIError as e:
        print(f"OpenAI API Error: {e}")
        return {}

    except yaml.YAMLError as e:
        print(f"YAML Parsing Error: {e}")
        return {}

def identify_new_tags(generated_tags, reference_tags):
    """
    Identifies new tags that are not present in the reference file.
    
    - Compares the AI-generated tags against existing reference tags.
    - Returns a set of newly introduced tags.

    Parameters:
        - generated_tags (list): List of tags generated by OpenAI.
        - reference_tags (set): Existing tags from the reference content.

    Returns:
        - set: Tags that are new compared to the reference.
    """
    return set(generated_tags) - reference_tags
