import openai
import yaml
import os
from scripts.file_utils import extract_yaml_header

# Load OpenAI API key from environment variable
openai.api_key = os.getenv("OPENAI_API_KEY")

def extract_reference_tags(reference_content):
    """
    Extracts tags from the reference file.
    
    - Parses the YAML metadata from the reference content.
    - Returns a set of existing tags for comparison.
    
    Parameters:
        - reference_content (str): The reference note content containing YAML metadata.
    
    Returns:
        - set: A set of extracted tags.
    """
    ref_metadata, _ = extract_yaml_header(reference_content)
    return set(ref_metadata.get("tags", [])) if ref_metadata else set()

def generate_yaml_header(content, reference_content, prompt_template, test_mode=False):
    """
    Generates a YAML header using OpenAI based on reference context.
    
    - If `test_mode` is True, returns a predefined trial YAML header (for testing/debugging).
    - Otherwise, constructs a prompt and queries OpenAI to generate a YAML header.
    """
    
    if test_mode:
        print("üõ†Ô∏è Running in test mode: Using predefined YAML header.")
        return {
            "tags": ["AI", "Machine Learning", "Deep Learning"],
            "aliases": ["ML Model", "AI Model"],
            "category": "Technology",
            "phase": "Model Training",
            "topic": "Neural Networks",
            "filename": "neural_network_model.py"
        }

    prompt = prompt_template.format(reference=reference_content, target_content=content)

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4-turbo",
            messages=[
                {"role": "system", "content": "You categorize notes using a provided reference."},
                {"role": "user", "content": prompt}
            ]
        )

        ai_metadata = yaml.safe_load(response["choices"][0]["message"]["content"].strip())

        # Ensure missing fields get default values
        return {
            "tags": ai_metadata.get("tags", []),
            "aliases": ai_metadata.get("aliases", []),
            "category": ai_metadata.get("category", "Uncategorized"),
            "phase": ai_metadata.get("phase", "Unknown"),
            "topic": ai_metadata.get("topic", "General"),
            "filename": ai_metadata.get("filename", "untitled.py")
        }

    except openai.error.OpenAIError as e:
        print(f"üö® OpenAI API Error: {e}")
        return {}

    except yaml.YAMLError as e:
        print(f"‚ö†Ô∏è YAML Parsing Error: {e}")
        return {}

    except Exception as e:
        print(f"‚ùå Unexpected Error in `generate_yaml_header`: {e}")
        return {}


def identify_new_tags(generated_tags, reference_tags):
    """
    Identifies new tags that are not present in the reference file.
    
    - Compares the AI-generated tags against existing reference tags.
    - Returns a set of newly introduced tags.

    Parameters:
        - generated_tags (list): List of tags generated by OpenAI.
        - reference_tags (set): Existing tags from the reference content.

    Returns:
        - set: Tags that are new compared to the reference.
    """
    return set(generated_tags) - reference_tags
